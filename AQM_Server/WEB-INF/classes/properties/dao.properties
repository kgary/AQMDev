# properties reflect the db vendor
daoClassName=edu.asupoly.heal.aqm.dmp.AQMDAODerbyImpl
# embedded derby jdbc properties
jdbc.driver=org.apache.derby.jdbc.EmbeddedDriver
# this one has to be changed to point to a local directory on your system
jdbc.url=jdbc:derby:D:/ASUProject/AQM_Server/derby_server/AQMdb
jdbc.user=
jdbc.passwd=

# Anything for derby here
derby.language.logStatementText=true
sql.checkConnectionQuery=values 1
#sql.getUniqueId=values next value for aqm_seq

sql.importDylosReadingWithGeo=insert into particle_reading (deviceid,userid,datetime,smallparticle,largeparticle,geolatitude,geolongitude,geomethod) values (?,?,?,?,?,?,?,?)
sql.importSensordroneReadingWithGeo=insert into sensordrone_reading (deviceid,datetime,co2deviceid,codata,co2data,presuredata,tempdata,humiditydata,geolatitude,geolongitude,geomethod) values (?,?,?,?,?,?,?,?,?,?,?)
sql.addServerPushEvent=insert into server_push_event (eventtime, responsecode, devicetype, message) values (?,?,?,?)
sql.getServerPushEvents=select * from server_push_event where responsecode > ? order by eventtime desc



#sql.getServerPushEventsForType=select * from serverpusheventlog where responsecode > ? and objecttype = ? order by eventtime desc
#

# The use of LIKE in these find methods for patientid allows us to use or not use patientid as a filter
#sql.findAirQualityReadingsForPatientTail=select * from particlereading where patientid like ? order by readingtime desc

#sql.findAirQualityReadingsForPatientBetween=select * from particlereading where patientid like ? and readingtime between ? and ? order by readingtime asc
#sql.findAirQualityReadingsForPatient=select * from particlereading where patientid like ? order by readingtime asc


