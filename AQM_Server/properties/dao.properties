# properties reflect the db vendor
daoClassName=edu.asupoly.heal.aqm.dmp.AQMDAODerbyImpl
# embedded derby jdbc properties
jdbc.driver=org.apache.derby.jdbc.EmbeddedDriver
# this one has to be changed to point to a local directory on your system
jdbc.url=jdbc:derby:D:/ASUProject/AQM_Server/derby_server/aqmsensordb
jdbc.user=
jdbc.passwd=

# Anything for derby here
derby.language.logStatementText=true
sql.checkConnectionQuery=values 1
#sql.getUniqueId=values next value for aqm_seq

#sql.importDylosReadingWithGeo=insert into particle_reading (deviceid,userid,datetime,smallparticle,largeparticle,geolatitude,geolongitude,geomethod) values (?,?,?,?,?,?,?,?)
#sql.importSensordroneReadingWithGeo=insert into sensordrone_reading (deviceid,datetime,co2deviceid,codata,co2data,presuredata,tempdata,humiditydata,geolatitude,geolongitude,geomethod) values (?,?,?,?,?,?,?,?,?,?,?)
#sql.addServerPushEvent=insert into server_push_event (eventtime, responsecode, devicetype, message) values (?,?,?,?)

sql.importCommonReadings=insert into aqmdata_common (deviceid,datetime,latitude,longitude,method) values (?,?,?,?,?)
sql.importDylosReadings=insert into aqmdata_dylos (deviceid,datetime,smallparticle,largeparticle,userid) values (?,?,?,?,?)
sql.importSensordroneReadings=insert into aqmdata_sensordrone (deviceid,datetime,pressuredata,tempdata,codata,humiditydata,co2sensorid,co2data) values (?,?,?,?,?,?,?,?)

sql.findCommonReadingsTest=select * from aqmdata_common order by datetime desc
sql.findDylosReadingsTest=select c.deviceid,c.datetime,latitude,longitude,method,smallparticle,largeparticle,userid from aqmdata_common c,aqmdata_dylos d where c.deviceId = d.deviceId and c.dateTime = d.dateTime order by datetime desc
sql.findSensordroneReadingsTest=select c.deviceid,c.datetime,latitude,longitude,method,pressuredata,tempdata,codata,humiditydata,co2sensorid,co2data from aqmdata_common c,aqmdata_sensordrone s where c.deviceId = s.deviceId and c.dateTime = s.dateTime order by datetime desc

sql.findDeviceIdinDylos=select deviceid from aqmdata_dylos group by deviceid
sql.findDeviceIdinSensordrone=select deviceid from aqmdata_sensordrone group by deviceid

sql.findDylosReadingsByGroup=select c.deviceid,c.datetime,latitude,longitude,method,smallparticle,largeparticle,userid from aqmdata_common c,aqmdata_dylos d where c.deviceId like ? and c.deviceId = d.deviceId and c.dateTime = d.dateTime order by datetime desc
sql.findSensordroneReadingsByGroup=select c.deviceid,c.datetime,latitude,longitude,method,pressuredata,tempdata,codata,humiditydata,co2sensorid,co2data from aqmdata_common c,aqmdata_sensordrone s where c.deviceId like ? and c.deviceId = s.deviceId and c.dateTime = s.dateTime order by datetime desc

#sql.getServerPushEventsForType=select * from serverpusheventlog where responsecode > ? and objecttype = ? order by eventtime desc
#sql.getServerPushEvents=select * from server_push_event where responsecode > ? order by eventtime desc

# The use of LIKE in these find methods for patientid allows us to use or not use patientid as a filter
#sql.findAirQualityReadingsForPatientTail=select * from particlereading where patientid like ? order by readingtime desc

#sql.findAirQualityReadingsForPatientBetween=select * from particlereading where patientid like ? and readingtime between ? and ? order by readingtime asc
#sql.findAirQualityReadingsForPatient=select * from particlereading where patientid like ? order by readingtime asc


